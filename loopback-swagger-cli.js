#!/usr/bin/env node
// Generated by CoffeeScript 1.10.0
(function() {
  var argv, clone, config, fs, json, merge, model, modelcfg, modelconfig, modelconfigfile, modeldir, name, options, ref, swagger, swaggerfile;

  fs = require('fs');

  clone = function(e) {
    return JSON.parse(JSON.stringify(e));
  };

  argv = require('minimist')(process.argv.slice(2));

  if (process.env.DEBUG != null) {
    console.dir(argv);
  }

  merge = function(source, obj, clone) {
    var prop, v;
    prop = void 0;
    v = void 0;
    if (source === null) {
      return source;
    }
    for (prop in obj) {
      prop = prop;
      v = obj[prop];
      if (source[prop] !== null && typeof source[prop] === 'object' && typeof obj[prop] === 'object') {
        merge(source[prop], obj[prop]);
      } else {
        if (clone) {
          source[prop] = this.clone;
        } else {
          source[prop] = obj[prop];
        }
      }
    }
    return source;
  };

  modelconfig = {
    dataSource: "db",
    "public": true
  };

  model = {
    name: "",
    base: "PersistedModel",
    idInjection: true,
    options: {
      validateUpsert: true
    },
    properties: {
      "id": {
        "type": "number",
        "required": true,
        "format": "int64"
      }
    },
    validations: [],
    relations: {},
    acls: [],
    methods: []
  };

  if (argv['_'].length < 3) {
    console.log("Usage: loopback-swagger-cli <swagger.json> <modeldir> <model-config.json>");
    process.exit(1);
  }

  swaggerfile = argv['_'][0];

  if (swaggerfile[0] !== '/') {
    swaggerfile = "./" + swaggerfile;
  }

  modeldir = argv['_'][1];

  if (modeldir[0] !== '/') {
    modeldir = "./" + modeldir;
  }

  modelconfigfile = argv['_'][2];

  if (modelconfigfile[0] !== '/') {
    modelconfigfile = "./" + modelconfigfile;
  }

  swagger = require(swaggerfile);

  if (!swagger.definitions) {
    console.error("cannot find definitons field in swagger file");
    process.exit(1);
  }

  config = {};

  ref = swagger.definitions;
  for (name in ref) {
    options = ref[name];
    json = clone(model);
    json = merge(json, options);
    console.log("writing " + modeldir + "/" + name + ".json");
    fs.writeFileSync(modeldir + "/" + name + ".json", JSON.stringify(json, null, 2));
    modelcfg = clone(modelconfig);
    if (options.dataSource != null) {
      modelcfg.dataSource = options.dataSource;
    }
    if (options["public"] != null) {
      modelcfg["public"] = options["public"];
    }
    config[name] = modelcfg;
  }

  console.log("writing " + modelconfigfile);

  fs.writeFileSync(modelconfigfile, JSON.stringify(config, null, 2));

}).call(this);
